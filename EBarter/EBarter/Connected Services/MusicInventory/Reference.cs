//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EBarter.MusicInventory {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://localhost:44330/", ConfigurationName="MusicInventory.MusicInventorySoap")]
    public interface MusicInventorySoap {
        
        // CODEGEN: Generating message contract since element name ListAllInstrumentsResult from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/ListAllInstruments", ReplyAction="*")]
        EBarter.MusicInventory.ListAllInstrumentsResponse ListAllInstruments(EBarter.MusicInventory.ListAllInstrumentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/ListAllInstruments", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.ListAllInstrumentsResponse> ListAllInstrumentsAsync(EBarter.MusicInventory.ListAllInstrumentsRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/AddInstrument", ReplyAction="*")]
        EBarter.MusicInventory.AddInstrumentResponse AddInstrument(EBarter.MusicInventory.AddInstrumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/AddInstrument", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.AddInstrumentResponse> AddInstrumentAsync(EBarter.MusicInventory.AddInstrumentRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/DeleteInstrumentPrice", ReplyAction="*")]
        EBarter.MusicInventory.DeleteInstrumentPriceResponse DeleteInstrumentPrice(EBarter.MusicInventory.DeleteInstrumentPriceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/DeleteInstrumentPrice", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.DeleteInstrumentPriceResponse> DeleteInstrumentPriceAsync(EBarter.MusicInventory.DeleteInstrumentPriceRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/UpdateInstrumentPrice", ReplyAction="*")]
        EBarter.MusicInventory.UpdateInstrumentPriceResponse UpdateInstrumentPrice(EBarter.MusicInventory.UpdateInstrumentPriceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/UpdateInstrumentPrice", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.UpdateInstrumentPriceResponse> UpdateInstrumentPriceAsync(EBarter.MusicInventory.UpdateInstrumentPriceRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CalMinInstrumentCost", ReplyAction="*")]
        EBarter.MusicInventory.CalMinInstrumentCostResponse CalMinInstrumentCost(EBarter.MusicInventory.CalMinInstrumentCostRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CalMinInstrumentCost", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CalMinInstrumentCostResponse> CalMinInstrumentCostAsync(EBarter.MusicInventory.CalMinInstrumentCostRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CalMaxInstrumentCost", ReplyAction="*")]
        EBarter.MusicInventory.CalMaxInstrumentCostResponse CalMaxInstrumentCost(EBarter.MusicInventory.CalMaxInstrumentCostRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CalMaxInstrumentCost", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CalMaxInstrumentCostResponse> CalMaxInstrumentCostAsync(EBarter.MusicInventory.CalMaxInstrumentCostRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CheckInventory", ReplyAction="*")]
        EBarter.MusicInventory.CheckInventoryResponse CheckInventory(EBarter.MusicInventory.CheckInventoryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/CheckInventory", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CheckInventoryResponse> CheckInventoryAsync(EBarter.MusicInventory.CheckInventoryRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/HowMuchMinInstrument", ReplyAction="*")]
        EBarter.MusicInventory.HowMuchMinInstrumentResponse HowMuchMinInstrument(EBarter.MusicInventory.HowMuchMinInstrumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/HowMuchMinInstrument", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMinInstrumentResponse> HowMuchMinInstrumentAsync(EBarter.MusicInventory.HowMuchMinInstrumentRequest request);
        
        // CODEGEN: Generating message contract since element name instrumentName from namespace https://localhost:44330/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/HowMuchMaxInstrument", ReplyAction="*")]
        EBarter.MusicInventory.HowMuchMaxInstrumentResponse HowMuchMaxInstrument(EBarter.MusicInventory.HowMuchMaxInstrumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://localhost:44330/HowMuchMaxInstrument", ReplyAction="*")]
        System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMaxInstrumentResponse> HowMuchMaxInstrumentAsync(EBarter.MusicInventory.HowMuchMaxInstrumentRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ListAllInstrumentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ListAllInstruments", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.ListAllInstrumentsRequestBody Body;
        
        public ListAllInstrumentsRequest() {
        }
        
        public ListAllInstrumentsRequest(EBarter.MusicInventory.ListAllInstrumentsRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class ListAllInstrumentsRequestBody {
        
        public ListAllInstrumentsRequestBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ListAllInstrumentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ListAllInstrumentsResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.ListAllInstrumentsResponseBody Body;
        
        public ListAllInstrumentsResponse() {
        }
        
        public ListAllInstrumentsResponse(EBarter.MusicInventory.ListAllInstrumentsResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class ListAllInstrumentsResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string ListAllInstrumentsResult;
        
        public ListAllInstrumentsResponseBody() {
        }
        
        public ListAllInstrumentsResponseBody(string ListAllInstrumentsResult) {
            this.ListAllInstrumentsResult = ListAllInstrumentsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddInstrumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddInstrument", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.AddInstrumentRequestBody Body;
        
        public AddInstrumentRequest() {
        }
        
        public AddInstrumentRequest(EBarter.MusicInventory.AddInstrumentRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class AddInstrumentRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double minPrice;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public double maxPrice;
        
        public AddInstrumentRequestBody() {
        }
        
        public AddInstrumentRequestBody(string instrumentName, double minPrice, double maxPrice) {
            this.instrumentName = instrumentName;
            this.minPrice = minPrice;
            this.maxPrice = maxPrice;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddInstrumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddInstrumentResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.AddInstrumentResponseBody Body;
        
        public AddInstrumentResponse() {
        }
        
        public AddInstrumentResponse(EBarter.MusicInventory.AddInstrumentResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class AddInstrumentResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool AddInstrumentResult;
        
        public AddInstrumentResponseBody() {
        }
        
        public AddInstrumentResponseBody(bool AddInstrumentResult) {
            this.AddInstrumentResult = AddInstrumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteInstrumentPriceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DeleteInstrumentPrice", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.DeleteInstrumentPriceRequestBody Body;
        
        public DeleteInstrumentPriceRequest() {
        }
        
        public DeleteInstrumentPriceRequest(EBarter.MusicInventory.DeleteInstrumentPriceRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class DeleteInstrumentPriceRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        public DeleteInstrumentPriceRequestBody() {
        }
        
        public DeleteInstrumentPriceRequestBody(string instrumentName) {
            this.instrumentName = instrumentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteInstrumentPriceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DeleteInstrumentPriceResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.DeleteInstrumentPriceResponseBody Body;
        
        public DeleteInstrumentPriceResponse() {
        }
        
        public DeleteInstrumentPriceResponse(EBarter.MusicInventory.DeleteInstrumentPriceResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class DeleteInstrumentPriceResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool DeleteInstrumentPriceResult;
        
        public DeleteInstrumentPriceResponseBody() {
        }
        
        public DeleteInstrumentPriceResponseBody(bool DeleteInstrumentPriceResult) {
            this.DeleteInstrumentPriceResult = DeleteInstrumentPriceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateInstrumentPriceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UpdateInstrumentPrice", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.UpdateInstrumentPriceRequestBody Body;
        
        public UpdateInstrumentPriceRequest() {
        }
        
        public UpdateInstrumentPriceRequest(EBarter.MusicInventory.UpdateInstrumentPriceRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class UpdateInstrumentPriceRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double instrumentMinPrice;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public double instrumentMaxPrice;
        
        public UpdateInstrumentPriceRequestBody() {
        }
        
        public UpdateInstrumentPriceRequestBody(string instrumentName, double instrumentMinPrice, double instrumentMaxPrice) {
            this.instrumentName = instrumentName;
            this.instrumentMinPrice = instrumentMinPrice;
            this.instrumentMaxPrice = instrumentMaxPrice;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateInstrumentPriceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="UpdateInstrumentPriceResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.UpdateInstrumentPriceResponseBody Body;
        
        public UpdateInstrumentPriceResponse() {
        }
        
        public UpdateInstrumentPriceResponse(EBarter.MusicInventory.UpdateInstrumentPriceResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class UpdateInstrumentPriceResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool UpdateInstrumentPriceResult;
        
        public UpdateInstrumentPriceResponseBody() {
        }
        
        public UpdateInstrumentPriceResponseBody(bool UpdateInstrumentPriceResult) {
            this.UpdateInstrumentPriceResult = UpdateInstrumentPriceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalMinInstrumentCostRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalMinInstrumentCost", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CalMinInstrumentCostRequestBody Body;
        
        public CalMinInstrumentCostRequest() {
        }
        
        public CalMinInstrumentCostRequest(EBarter.MusicInventory.CalMinInstrumentCostRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CalMinInstrumentCostRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double instrumentQuantity;
        
        public CalMinInstrumentCostRequestBody() {
        }
        
        public CalMinInstrumentCostRequestBody(string instrumentName, double instrumentQuantity) {
            this.instrumentName = instrumentName;
            this.instrumentQuantity = instrumentQuantity;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalMinInstrumentCostResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalMinInstrumentCostResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CalMinInstrumentCostResponseBody Body;
        
        public CalMinInstrumentCostResponse() {
        }
        
        public CalMinInstrumentCostResponse(EBarter.MusicInventory.CalMinInstrumentCostResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CalMinInstrumentCostResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double CalMinInstrumentCostResult;
        
        public CalMinInstrumentCostResponseBody() {
        }
        
        public CalMinInstrumentCostResponseBody(double CalMinInstrumentCostResult) {
            this.CalMinInstrumentCostResult = CalMinInstrumentCostResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalMaxInstrumentCostRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalMaxInstrumentCost", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CalMaxInstrumentCostRequestBody Body;
        
        public CalMaxInstrumentCostRequest() {
        }
        
        public CalMaxInstrumentCostRequest(EBarter.MusicInventory.CalMaxInstrumentCostRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CalMaxInstrumentCostRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double instrumentQuantity;
        
        public CalMaxInstrumentCostRequestBody() {
        }
        
        public CalMaxInstrumentCostRequestBody(string instrumentName, double instrumentQuantity) {
            this.instrumentName = instrumentName;
            this.instrumentQuantity = instrumentQuantity;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalMaxInstrumentCostResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalMaxInstrumentCostResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CalMaxInstrumentCostResponseBody Body;
        
        public CalMaxInstrumentCostResponse() {
        }
        
        public CalMaxInstrumentCostResponse(EBarter.MusicInventory.CalMaxInstrumentCostResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CalMaxInstrumentCostResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double CalMaxInstrumentCostResult;
        
        public CalMaxInstrumentCostResponseBody() {
        }
        
        public CalMaxInstrumentCostResponseBody(double CalMaxInstrumentCostResult) {
            this.CalMaxInstrumentCostResult = CalMaxInstrumentCostResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckInventoryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CheckInventory", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CheckInventoryRequestBody Body;
        
        public CheckInventoryRequest() {
        }
        
        public CheckInventoryRequest(EBarter.MusicInventory.CheckInventoryRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CheckInventoryRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        public CheckInventoryRequestBody() {
        }
        
        public CheckInventoryRequestBody(string instrumentName) {
            this.instrumentName = instrumentName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckInventoryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CheckInventoryResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.CheckInventoryResponseBody Body;
        
        public CheckInventoryResponse() {
        }
        
        public CheckInventoryResponse(EBarter.MusicInventory.CheckInventoryResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class CheckInventoryResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string CheckInventoryResult;
        
        public CheckInventoryResponseBody() {
        }
        
        public CheckInventoryResponseBody(string CheckInventoryResult) {
            this.CheckInventoryResult = CheckInventoryResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HowMuchMinInstrumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HowMuchMinInstrument", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.HowMuchMinInstrumentRequestBody Body;
        
        public HowMuchMinInstrumentRequest() {
        }
        
        public HowMuchMinInstrumentRequest(EBarter.MusicInventory.HowMuchMinInstrumentRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class HowMuchMinInstrumentRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double totalBudget;
        
        public HowMuchMinInstrumentRequestBody() {
        }
        
        public HowMuchMinInstrumentRequestBody(string instrumentName, double totalBudget) {
            this.instrumentName = instrumentName;
            this.totalBudget = totalBudget;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HowMuchMinInstrumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HowMuchMinInstrumentResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.HowMuchMinInstrumentResponseBody Body;
        
        public HowMuchMinInstrumentResponse() {
        }
        
        public HowMuchMinInstrumentResponse(EBarter.MusicInventory.HowMuchMinInstrumentResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class HowMuchMinInstrumentResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double HowMuchMinInstrumentResult;
        
        public HowMuchMinInstrumentResponseBody() {
        }
        
        public HowMuchMinInstrumentResponseBody(double HowMuchMinInstrumentResult) {
            this.HowMuchMinInstrumentResult = HowMuchMinInstrumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HowMuchMaxInstrumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HowMuchMaxInstrument", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.HowMuchMaxInstrumentRequestBody Body;
        
        public HowMuchMaxInstrumentRequest() {
        }
        
        public HowMuchMaxInstrumentRequest(EBarter.MusicInventory.HowMuchMaxInstrumentRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class HowMuchMaxInstrumentRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string instrumentName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public double totalBudget;
        
        public HowMuchMaxInstrumentRequestBody() {
        }
        
        public HowMuchMaxInstrumentRequestBody(string instrumentName, double totalBudget) {
            this.instrumentName = instrumentName;
            this.totalBudget = totalBudget;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class HowMuchMaxInstrumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="HowMuchMaxInstrumentResponse", Namespace="https://localhost:44330/", Order=0)]
        public EBarter.MusicInventory.HowMuchMaxInstrumentResponseBody Body;
        
        public HowMuchMaxInstrumentResponse() {
        }
        
        public HowMuchMaxInstrumentResponse(EBarter.MusicInventory.HowMuchMaxInstrumentResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="https://localhost:44330/")]
    public partial class HowMuchMaxInstrumentResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double HowMuchMaxInstrumentResult;
        
        public HowMuchMaxInstrumentResponseBody() {
        }
        
        public HowMuchMaxInstrumentResponseBody(double HowMuchMaxInstrumentResult) {
            this.HowMuchMaxInstrumentResult = HowMuchMaxInstrumentResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MusicInventorySoapChannel : EBarter.MusicInventory.MusicInventorySoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicInventorySoapClient : System.ServiceModel.ClientBase<EBarter.MusicInventory.MusicInventorySoap>, EBarter.MusicInventory.MusicInventorySoap {
        
        public MusicInventorySoapClient() {
        }
        
        public MusicInventorySoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicInventorySoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicInventorySoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicInventorySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.ListAllInstrumentsResponse EBarter.MusicInventory.MusicInventorySoap.ListAllInstruments(EBarter.MusicInventory.ListAllInstrumentsRequest request) {
            return base.Channel.ListAllInstruments(request);
        }
        
        public string ListAllInstruments() {
            EBarter.MusicInventory.ListAllInstrumentsRequest inValue = new EBarter.MusicInventory.ListAllInstrumentsRequest();
            inValue.Body = new EBarter.MusicInventory.ListAllInstrumentsRequestBody();
            EBarter.MusicInventory.ListAllInstrumentsResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).ListAllInstruments(inValue);
            return retVal.Body.ListAllInstrumentsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.ListAllInstrumentsResponse> EBarter.MusicInventory.MusicInventorySoap.ListAllInstrumentsAsync(EBarter.MusicInventory.ListAllInstrumentsRequest request) {
            return base.Channel.ListAllInstrumentsAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.ListAllInstrumentsResponse> ListAllInstrumentsAsync() {
            EBarter.MusicInventory.ListAllInstrumentsRequest inValue = new EBarter.MusicInventory.ListAllInstrumentsRequest();
            inValue.Body = new EBarter.MusicInventory.ListAllInstrumentsRequestBody();
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).ListAllInstrumentsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.AddInstrumentResponse EBarter.MusicInventory.MusicInventorySoap.AddInstrument(EBarter.MusicInventory.AddInstrumentRequest request) {
            return base.Channel.AddInstrument(request);
        }
        
        public bool AddInstrument(string instrumentName, double minPrice, double maxPrice) {
            EBarter.MusicInventory.AddInstrumentRequest inValue = new EBarter.MusicInventory.AddInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.AddInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.minPrice = minPrice;
            inValue.Body.maxPrice = maxPrice;
            EBarter.MusicInventory.AddInstrumentResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).AddInstrument(inValue);
            return retVal.Body.AddInstrumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.AddInstrumentResponse> EBarter.MusicInventory.MusicInventorySoap.AddInstrumentAsync(EBarter.MusicInventory.AddInstrumentRequest request) {
            return base.Channel.AddInstrumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.AddInstrumentResponse> AddInstrumentAsync(string instrumentName, double minPrice, double maxPrice) {
            EBarter.MusicInventory.AddInstrumentRequest inValue = new EBarter.MusicInventory.AddInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.AddInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.minPrice = minPrice;
            inValue.Body.maxPrice = maxPrice;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).AddInstrumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.DeleteInstrumentPriceResponse EBarter.MusicInventory.MusicInventorySoap.DeleteInstrumentPrice(EBarter.MusicInventory.DeleteInstrumentPriceRequest request) {
            return base.Channel.DeleteInstrumentPrice(request);
        }
        
        public bool DeleteInstrumentPrice(string instrumentName) {
            EBarter.MusicInventory.DeleteInstrumentPriceRequest inValue = new EBarter.MusicInventory.DeleteInstrumentPriceRequest();
            inValue.Body = new EBarter.MusicInventory.DeleteInstrumentPriceRequestBody();
            inValue.Body.instrumentName = instrumentName;
            EBarter.MusicInventory.DeleteInstrumentPriceResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).DeleteInstrumentPrice(inValue);
            return retVal.Body.DeleteInstrumentPriceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.DeleteInstrumentPriceResponse> EBarter.MusicInventory.MusicInventorySoap.DeleteInstrumentPriceAsync(EBarter.MusicInventory.DeleteInstrumentPriceRequest request) {
            return base.Channel.DeleteInstrumentPriceAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.DeleteInstrumentPriceResponse> DeleteInstrumentPriceAsync(string instrumentName) {
            EBarter.MusicInventory.DeleteInstrumentPriceRequest inValue = new EBarter.MusicInventory.DeleteInstrumentPriceRequest();
            inValue.Body = new EBarter.MusicInventory.DeleteInstrumentPriceRequestBody();
            inValue.Body.instrumentName = instrumentName;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).DeleteInstrumentPriceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.UpdateInstrumentPriceResponse EBarter.MusicInventory.MusicInventorySoap.UpdateInstrumentPrice(EBarter.MusicInventory.UpdateInstrumentPriceRequest request) {
            return base.Channel.UpdateInstrumentPrice(request);
        }
        
        public bool UpdateInstrumentPrice(string instrumentName, double instrumentMinPrice, double instrumentMaxPrice) {
            EBarter.MusicInventory.UpdateInstrumentPriceRequest inValue = new EBarter.MusicInventory.UpdateInstrumentPriceRequest();
            inValue.Body = new EBarter.MusicInventory.UpdateInstrumentPriceRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentMinPrice = instrumentMinPrice;
            inValue.Body.instrumentMaxPrice = instrumentMaxPrice;
            EBarter.MusicInventory.UpdateInstrumentPriceResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).UpdateInstrumentPrice(inValue);
            return retVal.Body.UpdateInstrumentPriceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.UpdateInstrumentPriceResponse> EBarter.MusicInventory.MusicInventorySoap.UpdateInstrumentPriceAsync(EBarter.MusicInventory.UpdateInstrumentPriceRequest request) {
            return base.Channel.UpdateInstrumentPriceAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.UpdateInstrumentPriceResponse> UpdateInstrumentPriceAsync(string instrumentName, double instrumentMinPrice, double instrumentMaxPrice) {
            EBarter.MusicInventory.UpdateInstrumentPriceRequest inValue = new EBarter.MusicInventory.UpdateInstrumentPriceRequest();
            inValue.Body = new EBarter.MusicInventory.UpdateInstrumentPriceRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentMinPrice = instrumentMinPrice;
            inValue.Body.instrumentMaxPrice = instrumentMaxPrice;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).UpdateInstrumentPriceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.CalMinInstrumentCostResponse EBarter.MusicInventory.MusicInventorySoap.CalMinInstrumentCost(EBarter.MusicInventory.CalMinInstrumentCostRequest request) {
            return base.Channel.CalMinInstrumentCost(request);
        }
        
        public double CalMinInstrumentCost(string instrumentName, double instrumentQuantity) {
            EBarter.MusicInventory.CalMinInstrumentCostRequest inValue = new EBarter.MusicInventory.CalMinInstrumentCostRequest();
            inValue.Body = new EBarter.MusicInventory.CalMinInstrumentCostRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentQuantity = instrumentQuantity;
            EBarter.MusicInventory.CalMinInstrumentCostResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).CalMinInstrumentCost(inValue);
            return retVal.Body.CalMinInstrumentCostResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CalMinInstrumentCostResponse> EBarter.MusicInventory.MusicInventorySoap.CalMinInstrumentCostAsync(EBarter.MusicInventory.CalMinInstrumentCostRequest request) {
            return base.Channel.CalMinInstrumentCostAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.CalMinInstrumentCostResponse> CalMinInstrumentCostAsync(string instrumentName, double instrumentQuantity) {
            EBarter.MusicInventory.CalMinInstrumentCostRequest inValue = new EBarter.MusicInventory.CalMinInstrumentCostRequest();
            inValue.Body = new EBarter.MusicInventory.CalMinInstrumentCostRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentQuantity = instrumentQuantity;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).CalMinInstrumentCostAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.CalMaxInstrumentCostResponse EBarter.MusicInventory.MusicInventorySoap.CalMaxInstrumentCost(EBarter.MusicInventory.CalMaxInstrumentCostRequest request) {
            return base.Channel.CalMaxInstrumentCost(request);
        }
        
        public double CalMaxInstrumentCost(string instrumentName, double instrumentQuantity) {
            EBarter.MusicInventory.CalMaxInstrumentCostRequest inValue = new EBarter.MusicInventory.CalMaxInstrumentCostRequest();
            inValue.Body = new EBarter.MusicInventory.CalMaxInstrumentCostRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentQuantity = instrumentQuantity;
            EBarter.MusicInventory.CalMaxInstrumentCostResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).CalMaxInstrumentCost(inValue);
            return retVal.Body.CalMaxInstrumentCostResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CalMaxInstrumentCostResponse> EBarter.MusicInventory.MusicInventorySoap.CalMaxInstrumentCostAsync(EBarter.MusicInventory.CalMaxInstrumentCostRequest request) {
            return base.Channel.CalMaxInstrumentCostAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.CalMaxInstrumentCostResponse> CalMaxInstrumentCostAsync(string instrumentName, double instrumentQuantity) {
            EBarter.MusicInventory.CalMaxInstrumentCostRequest inValue = new EBarter.MusicInventory.CalMaxInstrumentCostRequest();
            inValue.Body = new EBarter.MusicInventory.CalMaxInstrumentCostRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.instrumentQuantity = instrumentQuantity;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).CalMaxInstrumentCostAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.CheckInventoryResponse EBarter.MusicInventory.MusicInventorySoap.CheckInventory(EBarter.MusicInventory.CheckInventoryRequest request) {
            return base.Channel.CheckInventory(request);
        }
        
        public string CheckInventory(string instrumentName) {
            EBarter.MusicInventory.CheckInventoryRequest inValue = new EBarter.MusicInventory.CheckInventoryRequest();
            inValue.Body = new EBarter.MusicInventory.CheckInventoryRequestBody();
            inValue.Body.instrumentName = instrumentName;
            EBarter.MusicInventory.CheckInventoryResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).CheckInventory(inValue);
            return retVal.Body.CheckInventoryResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.CheckInventoryResponse> EBarter.MusicInventory.MusicInventorySoap.CheckInventoryAsync(EBarter.MusicInventory.CheckInventoryRequest request) {
            return base.Channel.CheckInventoryAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.CheckInventoryResponse> CheckInventoryAsync(string instrumentName) {
            EBarter.MusicInventory.CheckInventoryRequest inValue = new EBarter.MusicInventory.CheckInventoryRequest();
            inValue.Body = new EBarter.MusicInventory.CheckInventoryRequestBody();
            inValue.Body.instrumentName = instrumentName;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).CheckInventoryAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.HowMuchMinInstrumentResponse EBarter.MusicInventory.MusicInventorySoap.HowMuchMinInstrument(EBarter.MusicInventory.HowMuchMinInstrumentRequest request) {
            return base.Channel.HowMuchMinInstrument(request);
        }
        
        public double HowMuchMinInstrument(string instrumentName, double totalBudget) {
            EBarter.MusicInventory.HowMuchMinInstrumentRequest inValue = new EBarter.MusicInventory.HowMuchMinInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.HowMuchMinInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.totalBudget = totalBudget;
            EBarter.MusicInventory.HowMuchMinInstrumentResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).HowMuchMinInstrument(inValue);
            return retVal.Body.HowMuchMinInstrumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMinInstrumentResponse> EBarter.MusicInventory.MusicInventorySoap.HowMuchMinInstrumentAsync(EBarter.MusicInventory.HowMuchMinInstrumentRequest request) {
            return base.Channel.HowMuchMinInstrumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMinInstrumentResponse> HowMuchMinInstrumentAsync(string instrumentName, double totalBudget) {
            EBarter.MusicInventory.HowMuchMinInstrumentRequest inValue = new EBarter.MusicInventory.HowMuchMinInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.HowMuchMinInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.totalBudget = totalBudget;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).HowMuchMinInstrumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EBarter.MusicInventory.HowMuchMaxInstrumentResponse EBarter.MusicInventory.MusicInventorySoap.HowMuchMaxInstrument(EBarter.MusicInventory.HowMuchMaxInstrumentRequest request) {
            return base.Channel.HowMuchMaxInstrument(request);
        }
        
        public double HowMuchMaxInstrument(string instrumentName, double totalBudget) {
            EBarter.MusicInventory.HowMuchMaxInstrumentRequest inValue = new EBarter.MusicInventory.HowMuchMaxInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.HowMuchMaxInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.totalBudget = totalBudget;
            EBarter.MusicInventory.HowMuchMaxInstrumentResponse retVal = ((EBarter.MusicInventory.MusicInventorySoap)(this)).HowMuchMaxInstrument(inValue);
            return retVal.Body.HowMuchMaxInstrumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMaxInstrumentResponse> EBarter.MusicInventory.MusicInventorySoap.HowMuchMaxInstrumentAsync(EBarter.MusicInventory.HowMuchMaxInstrumentRequest request) {
            return base.Channel.HowMuchMaxInstrumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<EBarter.MusicInventory.HowMuchMaxInstrumentResponse> HowMuchMaxInstrumentAsync(string instrumentName, double totalBudget) {
            EBarter.MusicInventory.HowMuchMaxInstrumentRequest inValue = new EBarter.MusicInventory.HowMuchMaxInstrumentRequest();
            inValue.Body = new EBarter.MusicInventory.HowMuchMaxInstrumentRequestBody();
            inValue.Body.instrumentName = instrumentName;
            inValue.Body.totalBudget = totalBudget;
            return ((EBarter.MusicInventory.MusicInventorySoap)(this)).HowMuchMaxInstrumentAsync(inValue);
        }
    }
}
